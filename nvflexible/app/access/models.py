from datetime import datetime

from sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Table, DateTime
from sqlalchemy.orm import relationship, backref
from .database import Base

class Dummy(Base):
    __tablename__ = "dummies"
    
    id = Column(Integer, primary_key=True)
    random_string = Column(String(80), nullable=False)
    
"""
parents_table = Table(
    "parents_table",
    Column("parent_id", String(40), ForeignKey("submission.id")),
    Column("child_id", String(40), ForeignKey("submission.id")),
)


study_participant_table = Table(
    "study_participant_table",
    Column("study_id", Integer, ForeignKey("study.id"), primary_key=True),
    Column("participant_id", Integer, ForeignKey("participant.id"), primary_key=True),
)


class CommonMixin(object):
    id = Column(Integer, primary_key=True)
    name = Column(String(25))
    description = Column(String(256))
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime, onupdate=datetime.utcnow)


class CustomFieldMixin(object):
    id = Column(Integer, primary_key=True)
    key_name = Column(String(25))
    value_type = Column(String(25))
    value_string = Column(String(25))

    def __repr__(self):
        return str(self.asdict())


"""
"""
clients are any participants talking to tracker via tracker's api

Root CA -> tracker cert (role=server) + sub CA cert (role=subca)
sub CA -> client certs (role=client)

project := sub CA, participants := clients
study := subset of clients, one set of python codes
experiment := specific python codes (may reuse study code) and role for each participant
plan := a sequence of actions, occuring at specific time

submission := data generated by any client, including meta, defined in Submission,
such as participant, blob's state, parents, children and experiment,
and a blob, stored in blob storage

vital_sign := continuous information from clients to tracker.  Not suitable for
query, but good for monitoring/dashboard.

"""


"""
class Submission(Base):
    __tablename__ = "submissions"
    
    id = Column(String(40), primary_key=True)
    pct_id = Column(Integer, ForeignKey("participant.id"), nullable=False)
    exp_id = Column(Integer, ForeignKey("experiment.id"), nullable=False)
    state = Column(String(10), nullable=False)
    blob_id = Column(String(40), index=True)
    parents = relationship(
        "Submission",
        secondary=parents_table,
        primaryjoin=id == parents_table.c.child_id,
        secondaryjoin=id == parents_table.c.parent_id,
        lazy=False,
        backref=backref("children"),
    )
    custom_field_list = relationship("SubmissionCustomField", lazy=True, backref=backref("submission"))
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at = Column(DateTime, onupdate=datetime.utcnow)

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class SubmissionCustomField(CustomFieldMixin, Base):
    __tablename__ = "submission_custom_fields"

    sub_id = Column(Integer, ForeignKey("submission.id"), nullable=False)

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


# One project has one sub-ca cert
class Project(CommonMixin, Base):
    __tablename__ = "projects"

    cert_id = Column(Integer, ForeignKey("certificate.id"), nullable=False)
    certificate = relationship("Certificate", lazy=True, uselist=False)
    studies = relationship("Study", lazy=True, backref="project")
    participants = relationship("Participant", lazy="dynamic", backref=backref("project", uselist=False))

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class Study(CommonMixin, Base):
    __tablename__ = "studies"

    project_id = Column(Integer, ForeignKey("project.id"), nullable=False)
    participants = relationship(
        "Participant", secondary=study_participant_table, lazy="subquery", backref=backref("studies", lazy=False)
    )
    blob_id = Column(String(40))
    experiments = relationship("Experiment", lazy=True, backref=backref("study", uselist=False))

    def asdict(self):
        base_dict = {c.name: getattr(self, c.name) for c in self.__table__.columns}
        base_dict.update({"participants": self.participants})
        return base_dict


class ParticipantRole(CommonMixin, Base):
    __tablename__ = "participant_roles"

    pct_id = Column(Integer, ForeignKey("participant.id"), nullable=False)
    role = Column(String(10))
    exp_id = Column(Integer, ForeignKey("experiment.id"), nullable=False)


class Experiment(CommonMixin, Base):
    __tablename__ = "experiments"

    study_id = Column(Integer, ForeignKey("study.id"), nullable=False)
    plans = relationship("Plan", lazy=True, backref=backref("experiment"))
    blob_id = Column(String(40))
    participant_roles = relationship("ParticipantRole", lazy=True, backref=backref("experiment"))
    submissions = relationship("Submission", lazy=True, backref=backref("experiment", uselist=False))


class Participant(CommonMixin, Base):
    __tablename__ = "participants"

    cert_id = Column(Integer, ForeignKey("certificate.id"), nullable=False)
    certificate = relationship("Certificate", lazy=True, uselist=False)
    vital_signs = relationship("VitalSign", lazy=True, backref=backref("participant", uselist=False))
    project_id = Column(Integer, ForeignKey("project.id"), nullable=False)
    submissions = relationship("Submission", lazy=True, backref=backref("participant", uselist=False))

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


# Root CA does not change and must be pre-provisioned.
# Tracker cert has to be pre-provisioned before running.
# TODO: tools to generate such information to be inserted to 
class Certificate(CommonMixin, Base):
    __tablename__ = "certificates"

    fingerprint = Column(String(40), index=True)
    issuer = Column(String(25))
    subject = Column(String(25))
    s_crt = Column(String(2000))
    s_prv = Column(String(2000))
    role = Column(String(10))

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


# Plan basically is the action for one experiment,
# such as waiting, go, pause, resume, end
class Plan(CommonMixin, Base):
    __tablename__ = "plans"

    action = Column(String(10))
    effective_time = Column(DateTime, nullable=False, default=datetime.utcnow)
    exp_id = Column(Integer, ForeignKey("experiment.id"), nullable=False)

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class VitalSign(Base):
    __tablename__ = "vital_signs"

    id = Column(Integer, primary_key=True)
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    participant_id = Column(Integer, ForeignKey("participant.id"), nullable=False)
    custom_fields = relationship("VitalSignCustomField", lazy=True, backref=backref("vital_sign"))

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}

class VitalSignCustomField(CustomFieldMixin, Base):
    __tablename__ = "vital_sign_custom_fields"

    vital_sign_id = Column(Integer, ForeignKey("vital_sign.id"), nullable=False)

    def asdict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}

"""